项目的异常处理：

异常的分类：

普通异常：属于编译时异常            -    自己能处理就用编译异常
RuntimeException: 属于运行时异常   -    无能为力处理就用RuntimeException


已知异常 和 未知异常
未知异常：对于前端开发者和用户都是无意义的，都是后端开发者写的逻辑有问题造成的异常，以日志或打印的形式展现出来
已知异常：根据情况自行抛出异常


springbootcode1 中是简单的异常处理
springbootcode2 中是根据配置文件进行返回不同的异常描述
将该类与.properties文件关联起来  springbootcode2


springbootcode3：实现根据目录结构来访问接口地址
01. com.whj.springbootcode.core.hack.AutoPrefixConfiguraton
02. com.whj.springbootcode.core.configuration.AutoPrefixUrlConfiguraton
03. application.properties中配置controller的根包
04. BannerController中 @RequestMapping("/banner") 不用写v1了



com.whj.springbootcode.core.configuration.
  ExceptionCodeConfiguration：通过code码，再根据配置文件 config/exception-code.properties 来返回配置文件中的文件描述
  AutoPrefixConfiguraton：    配置类，加入容器


解决服务器返回前端文字乱码：
  IDEA的使用\解决服务器返给前端文字乱码.jpg


springbootcode4：接收前端传参


springbootcode4 处理路由参数 以及 Lombok的使用

springbootcode5 处理路由参数 以及 Lombok中@Builder注解的使用
重点！！！！返回前端的对象中，必须必须必须要有get方法！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！


JSR规范：
JSR-269 lombok的实现规范
JSR-303 专门用于Bean校验的规范
