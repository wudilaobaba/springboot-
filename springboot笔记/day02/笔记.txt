面向抽象编程可以实现开闭原则，从而写出可维护的代码
创建一个最简单的java项目 File - New - Project - Java - Next - Java Hello World - Next

OCP：软件开发的开闭原则：保证改动一处，其他地方仍然具有兼容性，将变化隔离到配置文件中
IOC: 控制反转：
  主控类是用来new依赖的对象的，现在new对象由容器来进行，所以主控类不在进行控制new了，就叫控制反转
  IOC终极奥义：
    控制权由用户或产品经理来进行控制代码
    举例：程序员生产积木  产品经理负责玩积木

DI:  依赖注入：
  让容器把对象注入到代码中，有：属性注入、构造注入、接口注入(基本不用)
  原理：看Container.class
IOC和DI可以实现OCP
DIP依赖倒置：说白了就是用接口来定义实例。
  细节要依赖抽象；高层模块不应该依赖底层模块，两者都应该依赖抽象！！！！！！！！！！！
  不要让实例依赖类，而是依赖接口，这就是依赖倒置。

重点：全部都面向接口编程 ，具体的实现类由Container容器来决定，这样就可以在编写一个类的时候忽略到依赖的类，
而完全开发该类

英雄联盟的四个版本：sampleJavaProject  但最终这个工厂模式+反射并不是IOC和DI
设计要满足：
  1.单纯interface可以统一方法的调用，但是不能统一对象的实例化
  2.只有一段代码中没有new，才能保证代码的稳定，从而实现OCP，有new的代码都是不稳定的
  3.把对象的实例化过程转移到其他的代码块中
  4.稳定是相对的，要将不稳定的代码隔离，其实就是容器，保证改动一处，其他地方仍然具有兼容性
  5.需求的变化造成了代码的不稳定
  6.修改配置文件并不违反OCP ,相当于用户的输入

容器就相当于一个齿轮，不会影响其他齿轮进行运转
